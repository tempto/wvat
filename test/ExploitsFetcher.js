const fc = require("fast-check");
const { getCVEExploitsUrl, getCVEListExploitsUrls } = require("../src/ExploitsFetcher");
const { isValidCVE, isValidURL } = require("../src/utils");
const chai = require("chai"),
    expect = chai.expect,
    should = chai.should(); // eslint-disable-line

describe("Exploits Fetcher tests", () => {
    describe("Exploits list url for a given cve", () => {
        it("should build the exploits website url", () => {
            const cve = "2019-1017";
            expect(getCVEExploitsUrl(cve)).to.equal(
                `https://www.exploit-db.com/search?cve=${cve}`,
            );
        });

        it("should fail when the cve is missing", () => {
            expect(getCVEListExploitsUrls).to.throw("Missing cve");
        });

        it("should generate valid urls from valid CVEs", () => {
            fc.assert(
                fc.property(
                    fc.integer(1000, 9999), fc.integer(1000, 9999999), (cve_left_part, cve_right_part) => {
                        const cve = `${cve_left_part}-${cve_right_part}`;
                        return isValidCVE(cve) && isValidURL(getCVEExploitsUrl(cve));
                    },
                ),
            );
        });
    });

    describe("Exploits list url for a cve list", () => {
        it("should build the exploits website url for each cve from the cve list", () => {
            const cve_list = [
                "2017-1015",
                "2018-1017",
                "2019-1019",
            ];

            expect(getCVEListExploitsUrls(cve_list)).to.deep.equal([
                {
                    cve: cve_list[0],
                    url: `https://www.exploit-db.com/search?cve=${cve_list[0]}`,
                },
                {
                    cve: cve_list[1],
                    url: `https://www.exploit-db.com/search?cve=${cve_list[1]}`,
                },
                {
                    cve: cve_list[2],
                    url: `https://www.exploit-db.com/search?cve=${cve_list[2]}`,
                },
            ]);
        });

        it("should fail when the cve list is missing", () => {
            expect(getCVEListExploitsUrls).to.throw("Missing cve list");
        });
    });
});
