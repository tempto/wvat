const fc = require("fast-check");
const {
    getExploitsDBExploitsUrl, getRapid7ExploitsUrl, getCirclExploitsUrl, getExploitDatabasesUrls,
} = require("../src/Exploits");
const { isValidCVE, isValidURL } = require("../src/utils");
const chai = require("chai"),
    expect = chai.expect,
    should = chai.should(); // eslint-disable-line

describe("Exploits list url for a given cve in Exploit-DB", () => {
    it("should build the exploits website url", () => {
        expect(getExploitsDBExploitsUrl("2019-1234")).to.equal(
            "https://www.exploit-db.com/search?cve=2019-1234",
        );

        expect(getExploitsDBExploitsUrl("2019-1234567")).to.equal(
            "https://www.exploit-db.com/search?cve=2019-1234567",
        );
    });

    it("should fail when the cve is missing", () => {
        expect(getExploitsDBExploitsUrl).to.throw("Missing cve");
    });

    it("should fail with invalid cve formats", () => {
        expect(() => getExploitsDBExploitsUrl("CVE-1234-5678")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getExploitsDBExploitsUrl("123-4567")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getExploitsDBExploitsUrl("1234-567")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getExploitsDBExploitsUrl("1234-ABCDEFGH")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
    });

    it("should generate valid urls from valid CVEs", () => {
        fc.assert(
            fc.property(
                fc.integer(1000, 9999), fc.integer(1000, 9999999), (cve_left_part, cve_right_part) => {
                    const cve = `${cve_left_part}-${cve_right_part}`;
                    return isValidCVE(cve) && isValidURL(getExploitsDBExploitsUrl(cve));
                },
            ),
        );
    });
});

describe("Exploits list url for a given cve in Rapid7", () => {
    it("should build the exploits website url", () => {
        expect(getRapid7ExploitsUrl("2019-1234")).to.equal(
            "https://www.rapid7.com/db/?q=CVE-2019-1234&type=nexpose",
        );

        expect(getRapid7ExploitsUrl("2019-1234567")).to.equal(
            "https://www.rapid7.com/db/?q=CVE-2019-1234567&type=nexpose",
        );
    });

    it("should fail when the cve is missing", () => {
        expect(getRapid7ExploitsUrl).to.throw("Missing cve");
    });

    it("should fail with invalid cve formats", () => {
        expect(() => getRapid7ExploitsUrl("CVE-1234-5678")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getRapid7ExploitsUrl("123-4567")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getRapid7ExploitsUrl("1234-567")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getRapid7ExploitsUrl("1234-ABCDEFGH")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
    });

    it("should generate valid urls from valid CVEs", () => {
        fc.assert(
            fc.property(
                fc.integer(1000, 9999), fc.integer(1000, 9999999), (cve_left_part, cve_right_part) => {
                    const cve = `${cve_left_part}-${cve_right_part}`;
                    return isValidCVE(cve) && isValidURL(getRapid7ExploitsUrl(cve));
                },
            ),
        );
    });
});

describe("Exploits list url for a given cve in Circl", () => {
    it("should build the exploits website url", () => {
        expect(getCirclExploitsUrl("2019-1234")).to.equal(
            "https://search.circl.lu/?q=2019-1234",
        );

        expect(getCirclExploitsUrl("2019-1234567")).to.equal(
            "https://search.circl.lu/?q=2019-1234567",
        );
    });

    it("should fail when the cve is missing", () => {
        expect(getCirclExploitsUrl).to.throw("Missing cve");
    });

    it("should fail with invalid cve formats", () => {
        expect(() => getCirclExploitsUrl("CVE-1234-5678")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getCirclExploitsUrl("123-4567")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getCirclExploitsUrl("1234-567")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
        expect(() => getCirclExploitsUrl("1234-ABCDEFGH")).to.throw("Invalid cve format. Expected format: XXXX-YYYY");
    });

    it("should generate valid urls from valid CVEs", () => {
        fc.assert(
            fc.property(
                fc.integer(1000, 9999), fc.integer(1000, 9999999), (cve_left_part, cve_right_part) => {
                    const cve = `${cve_left_part}-${cve_right_part}`;
                    return isValidCVE(cve) && isValidURL(getCirclExploitsUrl(cve));
                },
            ),
        );
    });
});

describe("List of hyperlinks to known exploit databases", () => {
    it("should build the exploit databases hyperlinks array", () => {
        expect(getExploitDatabasesUrls("2019-1234")).to.deep.equal([
            "https://www.exploit-db.com/search?cve=2019-1234",
            "https://www.rapid7.com/db/?q=CVE-2019-1234&type=nexpose",
            "https://search.circl.lu/?q=2019-1234",
        ]);

        expect(getExploitDatabasesUrls("2019-1234567")).to.deep.equal([
            "https://www.exploit-db.com/search?cve=2019-1234567",
            "https://www.rapid7.com/db/?q=CVE-2019-1234567&type=nexpose",
            "https://search.circl.lu/?q=2019-1234567",
        ]);
    });
});
